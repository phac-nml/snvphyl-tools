#!/usr/bin/env perl

use FindBin;
use Test::More;
use Test::Exception;
use File::Compare;
use File::Temp qw(tempdir);
use JSON;
use Test::JSON;
use FindBin;
use lib $FindBin::Bin.'/../lib';
use Reporter;

my $script_dir = $FindBin::Bin;

my $old_env = $ENV{'PERL5LIB'};
$ENV{'PERL5LIB'} = "$script_dir/../lib:$script_dir/../cpanlib/lib/perl5:";
$ENV{'PERL5LIB'} .= $old_env if (defined $old_env);

my $mapping_dir = "$script_dir/mapping";
my $mapping_bin = "$script_dir/../verify_mapping_quality.pl";
my ($command);

#==============================================================================
#UNIT TESTS

my %test_json;
$test_json{'embed'}{'test'} = 12345;
$test_json{'embed'}{'test2'} = "abcde";

#1 => test the record_read_mapping submodule:
my $reporter = Reporter->new;
#my $results = $reporter->record_read_mapping_data('reporter/sample1.bam', 'reporter/sample2.bam', 'reporter/sample3.bam');
#ok($results, "The method produces output.");
#ok($results->{'status'} eq 'FAILED', "The correct output is generated by record_read_mapping.");
#ok(@{$results->{'Problem strains'}} == 1, "The correct number of problematic isolates were identified.");
#ok($results->{'depth'}==15, "The correct depth level is being set.");

#2=> test the record_reference_info submodule:
#my $reference = $reporter->record_reference_info(to_json($test_json), '12345', 'Escherichia', 'coli', 'O157', 'Illumina', 'NML', 'NO', '3500000', 'NO');

#3
my $filter_stats = $reporter->record_filter_stats('reporter/pseudoalign-positions1.tsv', to_json(\%test_json));
print $filter_stats;

#my $file_sizes = $reporter->record_file_sizes('reporter/sample1.bam', 'reporter/sample2.bam', 'reporter/sample3.bam');
#print $file_Sizes;

#4=> test that the reference information is being recorded correctly

done_testing();
