#!/usr/bin/env perl
# extract_snps_metaalign.pl
# Purpose:  Given a snv_align-positions.tsv and list of strains extract out SNPs 
# among the strains.

use warnings;
use strict;

use Getopt::Long;

my ($input,$output,@strains,$include_reference,$verbose);
$verbose = 0;

sub generate_strain_index
{
	my ($header_line, $input) = @_;
	my %strain_index; # maps {strain_id => column number}

	die "Error: no header line defined in $input" if ($header_line !~ /^#Chromosome\tPosition\tStatus\tReference/);
	my (undef,undef,undef,@strains) = split(/\t/,$header_line);
	die "Error: no strains defined in $input" if (@strains <= 0);

	for (my $i = 0; $i < @strains; $i++)
	{
		my $curr_name = $strains[$i];

		die "Error: name $curr_name was already found in $input" if (exists $strain_index{$curr_name});
		$strain_index{$curr_name} = $i;
	}

	return \%strain_index;
}

sub usage
{
	"Usage: $0 -i [snv_align-positions.tsv] [-r] --strain [strain_name] [-v]\n".
	"Parameters:\n".
	"\t-i|--input:  Input file (snv_align-positions.tsv generated by snp pipeline)\n".
	"\t-o|--output:  Output file name.\n".
	"\t-r|--include-reference: Include reference in set of SNPs.\n".
	"\t-s|--strain:  Strain name.\n".
	"\t-v|--verbose\n";
}

# MAIN
if (!GetOptions('i|input=s' => \$input,
		'o|output=s' => \$output,
		'r|include-reference' => \$include_reference,
		'v|verbose' => \$verbose,
		's|strain=s' => \@strains))
{
	die "Invalid option\n".usage;
}

die "Error: no input file defined\n".usage if (not defined $input);
die "Error: file $input does not exist" if (not -e $input);
die "Error: output file not defind" if (not defined $output);

if ($include_reference)
{
	unshift(@strains,'Reference'); # make sure reference is at beginning of printout
}

print "Date: ".`date`;
print "Working on $input\n";


open(my $fh, "<$input") or die "Could not open $input: $!";
open(my $ofh, ">$output") or die "Could not open $output: $!";
print $ofh "#Chromosome\tPosition\tStatus";
for my $strain_name (@strains)
{
	print $ofh "\t$strain_name";
}
print $ofh "\n";

my $line = readline($fh);
chomp($line);

my $strain_index = generate_strain_index($line,$input);
my $unequal = 0;
my $valid = 0;
my $total = 0;

while(my $line = readline($fh))
{
	chomp $line;
	my @values = split(/\t/,$line);

	my ($chrom,$pos,$status,@dna) = @values;
	my @selected_dna;

	if ($status ne 'valid')
	{
		print STDERR "skipping over line \"$line\": invalid\n" if ($verbose);
	}
	else
	{
		my %dna_table; # checks to make sure not all dna bases are the same
		for my $strain_name (@strains)
		{
			my $index = $strain_index->{$strain_name};
			die "error: no index number for $strain_name" if (not defined $index);
	
			push(@selected_dna,$dna[$index]);
			$dna_table{$dna[$index]} = 1;
		}
	
		# if the same number of dna bases exist
		if (scalar (keys %dna_table) <= 1)
		{
			print STDERR "skipping over line \"$line\": dna bases are the same\n" if ($verbose);
		}
		else
		{
			print $ofh "$chrom\t$pos\t$status\t".join("\t",@selected_dna)."\n";
			$unequal++;
		}
		$valid++;
	}
	$total++;
}
close $fh;
close $ofh;

print "Kept $unequal SNPs from $valid valid positions out of $total total positions\n";
print "Wrote SNPs to $output\n";
